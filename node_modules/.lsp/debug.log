Hello - from /Users/mandalarian/.vscode/extensions/jaredly.reason-vscode-1.7.8/bin.native
Previous log location: /var/folders/rt/7lc5vcw16459dszl8djk35fh0000gn/T/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json"}, {"globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":true,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/outro.re","languageId":"reason","version":1,"text":"= あとがき\n\n本書を最後まで読んでくださった皆さん、ありがてえええええええええええええええ。\n本書が皆さんのコードをより良くできると幸いです。\n\nあとがきを書くスペースをなんとかかんとか確保することができた、奇跡である。\nせっかく作った1ページでこんなしょうもないことを書いていて良いのだろうか。\n\nRustがいいぞとは言いましたけど、RustをやるとC++の素晴らしさに気がつくんですよね。\n特に可変長テンプレートですね、Rustだとマクロにならざるをえないのがもにょるですよ。\nBoostみたいに最強のライブラリもないですしね…。\nBoostほんとになんでもあってすごいですよね…。\n\n本書を書く過程でお世話になった人は割と少ない。\n少ない中でももっとも感謝したいのは可愛いケモミミを書いてくれた俺九番先生です。\n間違えました、表紙をデザインしてくれた俺九番先生です。\nいや、表紙可愛すぎるでしょ。\n\nあと、間違いを指摘してくれた某AgatePrisさんと某hsjoihsさんには感謝しております。\n\n技術書典6に応募して落選したんですけど、このときはC++の魔術書を書こうと思ってたんですよね。\nでも、落選の腹いせに型の魔術を駆使してライブラリを書いていて、魔術ってみんなが使ったらアカンなとね、思ったんですよ。\n\n反響が良くても悪くても、在庫の山でも、また書くと思います。\nその時にはまた手にとっていただけると光栄です。\n\n最後に、執筆時間を無限に奪ったあのソートなぞなぞという謎の遊戯について…\n\nソートなぞなぞというソート済みの単語を復元して元の単語を当てるという早打ち競技。\nDiscordのサーバーで動いておりますが、ぼくはこの遊戯に魂を売りました。\nソートなぞなぞを落とさないために自分のECSでソートなぞなぞをホストしましたし、\nソートなぞなぞで経験ゼロのフランス語の単語を覚えつつあります。\nソートなぞなぞをRustでフルスクラッチしており、執筆が終わった段階で本格的に時間を投入する予定です。\n次に出す本のタイトルが『ソートなぞなぞを支える技術』になっているかもしれないです（それくらい本気でやってます）。\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/outro.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0331401824951ms
Sending response {"id": 1, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/outro.re"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 2, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/outro.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0321865081787ms
Sending response {"id": 3, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":4,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/outro.re"},"position":{"line":11,"character":12}}}
[server] Got a method textDocument/hover
[server] processing took 0.0221729278564ms
Sending response {"id": 4, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":5,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/outro.re"},"position":{"line":11,"character":12}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Sending response {"id": 5, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":6,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/outro.re"},"range":{"start":{"line":11,"character":12},"end":{"line":11,"character":12}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0178813934326ms
Sending response {"id": 6, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":7,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/outro.re"},"position":{"line":11,"character":25}}}
[server] Got a method textDocument/hover
[server] processing took 0.0529289245605ms
Sending response {"id": 7, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":8,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/outro.re"},"range":{"start":{"line":11,"character":25},"end":{"line":11,"character":25}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0178813934326ms
Sending response {"id": 8, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":9,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/outro.re"},"range":{"start":{"line":0,"character":0},"end":{"line":34,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 9, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/outro.re","version":2},"contentChanges":[{"text":"= Postscript\n\nThank you to everyone who has read this book to the end.\nWe hope this book will improve your code.\n\nIt is a miracle that I managed to secure a space for writing postcards.\nIs it okay if I write something unhelpful on one page I made?\n\nI said that Rust is good, but when you do Rust, you will notice the wonderfulness of C ++.\nIn particular, it is a variable length template, and Rust has to be a macro.\nThere is no strongest library like Boost ...\nBoost is really amazing, isn't it?\n\nVery few people have helped me in the process of writing this book.\nThe most grateful of all is Mr. Kyuban who wrote cute cheeks.\nI made a mistake, I am Mr. Kyuban who designed the cover.\nNo, the cover is too cute.\n\nAlso, I am grateful to certain Agate Pris and certain hsjoihs who pointed out the mistake.\n\nI applied for Technical Book 6 and lost, but at this time I was thinking of writing a C ++ magic book.\nHowever, I was writing a library by making full use of type magic to get sick of losing, and I thought that it would be awkward if everyone used magic.\n\nI think I will write it again, whether it is good or bad, or a pile of stock.\nAt that time, it would be an honor if you could pick it up again.\n\nLastly, about the mysterious game called that sort riddle that took infinite writing time ...\n\nA quick-hit competition in which the sorted words called sorted riddles are restored and the original words are applied.\nIt runs on Discord's server, but I sold my soul to this game.\nI hosted a sort riddle on my ECS to avoid dropping the sort riddle,\nI am learning French words with no experience in sort riddles.\nI'm fully scratching the sort riddle with Rust, and I plan to devote time to it when I'm done writing.\nThe title of the next book may be \"Technology that supports sort riddles\" (I'm serious about that)."}]}}
Read message 
{"jsonrpc":"2.0","id":10,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/outro.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 10, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":11,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/outro.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00882148742676ms
Sending response {"id": 11, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":12,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/outro.re"},"range":{"start":{"line":33,"character":99},"end":{"line":33,"character":99}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0121593475342ms
Sending response {"id": 12, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":13,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/outro.re"},"position":{"line":33,"character":42}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 13, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/outro.re","version":2},"contentChanges":[{"text":"= Postscript\n\nThank you to everyone who has read this book to the end.\nWe hope this book will improve your code.\n\nIt is a miracle that I managed to secure a space for writing postcards.\nIs it okay if I write something unhelpful on one page I made?\n\nI said that Rust is good, but when you do Rust, you will notice the wonderfulness of C ++.\nIn particular, it is a variable length template, and Rust has to be a macro.\nThere is no strongest library like Boost ...\nBoost is really amazing, isn't it?\n\nVery few people have helped me in the process of writing this book.\nThe most grateful of all is Mr. Kyuban who wrote cute cheeks.\nI made a mistake, I am Mr. Kyuban who designed the cover.\nNo, the cover is too cute.\n\nAlso, I am grateful to certain Agate Pris and certain hsjoihs who pointed out the mistake.\n\nI applied for Technical Book 6 and lost, but at this time I was thinking of writing a C ++ magic book.\nHowever, I was writing a library by making full use of type magic to get sick of losing, and I thought that it would be awkward if everyone used magic.\n\nI think I will write it again, whether it is good or bad, or a pile of stock.\nAt that time, it would be an honor if you could pick it up again.\n\nLastly, about the mysterious game called that sort riddle that took infinite writing time ...\n\nA quick-hit competition in which the sorted words called sorted riddles are restored and the original words are applied.\nIt runs on Discord's server, but I sold my soul to this game.\nI hosted a sort riddle on my ECS to avoid dropping the sort riddle,\nI am learning French words with no experience in sort riddles.\nI'm fully scratching the sort riddle with Rust, and I plan to devote time to it when I'm done writing.\nThe title of the next book may be \"Technology that supports sort riddles\" (I'm serious about that)."}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/outro.re","version":2}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":14,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/outro.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 14, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":15,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/outro.re"},"position":{"line":31,"character":30}}}
[server] Got a method textDocument/hover
[server] processing took 0.0259876251221ms
Sending response {"id": 15, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/intro.re","languageId":"reason","version":1,"text":"= はじめに\n\n本書はプログラミングを始めたばかりの人を対象としません。\n初心者を脱し、その先へと進むプログラマへのメッセージをまとめたものです。\n\n本書では特にことわりがない限りC++17を前提とします。\n\n仕事をしている中で「もっとこうしたほうがいい」というアドバイスをすることや、\n「この機能はこういう仕組みなんだよ」と解説をする機会が多くあります。\n\n幾度も説明するうちに、本でも書いたほうがいいのではないかと思い、筆をとった次第です。\n\n後半、サンプルコードのコメントの大部分が英語となっております。\n油断しておりました。\nまあ、C++プログラマの大部分が英語が読めると信じております。\n読めない人はコードから気合で察してください（すいません）。\n\n== まえおき\n\n僕は「いなむのみたま」と申します。\n\n僕の得意分野はライブラリプログラミングです。\nライブラリを作るためには、アプリケーションだけを作るなら一生使わないようなC++の機能を山のように使うことになります。\nなので、一般のC++プログラマより少しだけC++に詳しいです。\n\nC++の守り神として日々C++のコンパイラをいじめています。\nいなむのみたまのかみ(@mitama_rs)という名前でTwitterに生息しており、Twitterで迷えるC++プログラマを救う活動をしています。\n\nさて、突然ですがぼくの苦労話です。\nとあるベンチャー企業に雇われてC++やらRustやらを書いて一年が経ちました。\nジョブチェンジしたてのC++プログラマに少々の苦悩が立ちはだかりました。\n\n * スマートポインタ使ってないどころか、newですらなくてmallocを使うソースコード\n * 完全下位互換STLともいうべき、オレオレ実装\n * 3万を超えるヘッダを有し、そびえ立つライブラリ\n * ドキュメントもないし意味不明な過去の遺産\n * 「templateは難しいからできるだけ使うな」とか言う人\n * 全然自動化されてないCMakeLists\n\nというかだいたいの苦悩はOpen Cascade Technologyというライブラリが原因です。\n\nC++に限らず、汚いコードは非常に汚いです。\n「もうお前C++書くな」と言いたいこともあります。\n\n汚いコードを書いているプログラマは決してサボっているわけではありません。\nそれどころか、僕よりも何倍もの時間コードを書いているように見えます。\nライブラリを使えばいい処理を手で書いたり、\n同じような少し違う処理をたくさん書いたり、\n意味のない条件分岐を書いたり、\n使わない変数を書いたり、\nとにかくありとあらゆる間違った技法を凝らしてコーディングを複雑にしているのです。\n\n悪いことに、CMakeListsをキレイにしたり、テストを充実させるのに当てる時間もありません。\n実装で手一杯なのですから。\n\n幸いにもベンチャー企業はとても動きやすいです、クソコードを見たら焼き尽くすことにしています。\nすでにあるコードを見て新人が真似をするなんてことになったら耐えられません。\nクソコードを1行放置するとそのうち100行になると思ってやってます。\nぶっちゃけると本書は、そのときの僕が流した涙やついたため息をまとめたものです。\n幸いなことに、教育とレビューで生まれる前にクソコードを滅ぼす程度にはチームが安定してきたのでこの本の続編が執筆されることはないでしょう。\n\n=== @<b>{C++は難しいのか？}\n\nC++は難しいです、でもほとんどの場合は必要な難しさだと思っています。\n\nC++はものすごく高機能です。\n簡単なことを簡単にコーディングするには向いていないかもしれません。\nしかし、ライブラリを書いている僕からすると天国のような言語です。\n優れた実行時性能と柔軟なインターフェイスを備えたライブラリを書きたいとき、いつもC++は最高の言語でした。\nなんだかんだPythonも使いますが、実行時性能が足りなければC++で書き直せばいいのだという謎の安心感がありました（もちろんPythonのライブラリも優秀ですが）。\n\n実行時性能が優れていなくてもよく、専用のインターフェイスがあればよく、またC++の過去の遺産もない場合、\nC++は無駄に複雑で難しく見えるのかもしれません。\n\n簡単に書ける言語はほとんどの場合、何かを切り捨てることで簡単になっているのです。\nそういう意味では、C++は難しいです。\n様々な機能がユーザーに開放されています。\nそれらを真に必要としたとき、C++はあなたの助けとなってくれるでしょう。\n逆にそれらを真に必要としない場合、C++を開発言語に選択するのは間違っているかもしれません。\nそういう人はとなりのPython部屋に行くべきなのです。\n\n@<b>{C++の規格の難解さにブチ切れることもありますけどね！}\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":16,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/intro.re"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 16, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":17,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/intro.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 17, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":18,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/intro.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
Sending response {"id": 18, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":19,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/intro.re"},"position":{"line":12,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.0271797180176ms
Sending response {"id": 19, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":20,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/intro.re"},"position":{"line":12,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 20, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":21,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/intro.re"},"range":{"start":{"line":12,"character":10},"end":{"line":12,"character":10}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0181198120117ms
Sending response {"id": 21, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":22,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/intro.re"},"position":{"line":12,"character":10}}}
[server] Got a method textDocument/definition
[server] processing took 0.0100135803223ms
Sending response {"id": 22, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":23,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/intro.re"},"range":{"start":{"line":0,"character":0},"end":{"line":82,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0450611114502ms
Sending response {"id": 23, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":24,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/intro.re"},"position":{"line":12,"character":10}}}
[server] Got a method textDocument/definition
[server] processing took 0.0109672546387ms
Sending response {"id": 24, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/intro.re","version":2},"contentChanges":[{"text":"= Introduction\n\nThis book is not intended for people who are just beginning programming.\nIt is a compilation of messages for programmers who leave beginners and move on.\n\nThis book assumes C ++ 17 unless otherwise noted.\n\nTo give advice that \"more like this\" while working,\nThere are many opportunities to explain, \"This is how this function works.\"\n\nAs I explained it many times, I thought I should write it in a book, so I took the brush.\n\nIn the latter half, most of the comments in the sample code are in English.\nI was careless.\nWell, I believe most C ++ programmers can read English.\nIf you can't read it, please feel free from the code (sorry).\n\n== Maeki\n\nMy name is Inamu Mitama.\n\nMy area of ​​expertise is library programming.\nTo create a library, you have to pile up a lot of C ++ features that you wouldn't use for the rest of your application.\nSo I'm a little more familiar with C ++ than a regular C ++ programmer.\n\nAs a guardian of C ++, I am bullying C ++ compilers every day.\nIt lives on Twitter under the name Inamu no Mitama no Kakami (@mitama_rs) and is working to save C ++ programmers who are lost on Twitter.\n\nBy the way, suddenly, this is my story.\nIt has been a year since I was hired by a venture company and wrote C ++ and Rust.\nThe C ++ programmer who had just changed jobs had some troubles.\n\n * Source code that uses malloc, not even smart pointers, even new\n * Completely backward compatible STL, oleore implementation\n * A towering library with over 30,000 headers\n * No documentation or meaningless past heritage\n * People who say \"use templates as much as possible because they are difficult\"\n * CMakeLists not automated at all\n\nMost of the suffering is caused by a library called Open Cascade Technology.\n\nNot just C ++, dirty code is very dirty.\nSometimes I want to say \"Don't write C ++ anymore\".\n\nProgrammers who write dirty code aren't in any way out.\nOn the contrary, it looks like I'm writing time code many times more than I do.\nIf you use the library, you can write the processing by hand,\nI wrote a lot of similar, slightly different processing,\nWriting meaningless conditional branches,\nWrite unused variables,\nIt's all about doing all the wrong techniques to complicate coding.\n\nWorse, we don't have the time to clean up the CMakeLists or enrich our tests.\nIt's full of implementation.\n\nFortunately venture companies are very mobile, so I'm going to burn out the shit code.\nIt's unbearable if a newcomer looks at the existing code and imitates it.\nI'm thinking that if you leave one line of shit code, it will be 100 lines of it.\nThis book is a collection of tears and sighs that I shed at that time.\nFortunately, the sequel to this book will not be written because the team has been stable enough to destroy the fucking code before it is born in education and review.\n\n=== @ <b> {Is C ++ difficult? }\n\nC ++ is difficult, but in most cases I find it necessary.\n\nC ++ is extremely sophisticated.\nIt may not be suitable for easy coding of simple things.\nBut from the perspective of me writing the library, it's a heavenly language.\nWhenever I wanted to write a library with great run-time performance and a flexible interface, C ++ was the best language.\nI use Python for some reason, but there was a mysterious reassurance that I could rewrite it in C ++ if the runtime performance was not sufficient (although the Python library is excellent, of course).\n\nIf you don't need good run-time performance, have a dedicated interface, and don't have a legacy of C ++,\nC ++ may seem wastefully complex and difficult.\n\nMost easy-to-write languages ​​are made simple by truncating something.\nIn that sense, C ++ is difficult.\nVarious functions are open to users.\nC ++ can help you when you really need them.\nConversely, choosing C ++ as your development language may be wrong if you don't really need them.\nThose people should go to the next Python room.\n\n@ <b> {C ++ standards can be difficult to understand, though! }"}]}}
Read message 
{"jsonrpc":"2.0","id":25,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/intro.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 25, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":26,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/intro.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 26, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":27,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/intro.re"},"range":{"start":{"line":81,"character":63},"end":{"line":81,"character":63}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 27, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/intro.re","version":2},"contentChanges":[{"text":"= Introduction\n\nThis book is not intended for people who are just beginning programming.\nIt is a compilation of messages for programmers who leave beginners and move on.\n\nThis book assumes C ++ 17 unless otherwise noted.\n\nTo give advice that \"more like this\" while working,\nThere are many opportunities to explain, \"This is how this function works.\"\n\nAs I explained it many times, I thought I should write it in a book, so I took the brush.\n\nIn the latter half, most of the comments in the sample code are in English.\nI was careless.\nWell, I believe most C ++ programmers can read English.\nIf you can't read it, please feel free from the code (sorry).\n\n== Maeki\n\nMy name is Inamu Mitama.\n\nMy area of ​​expertise is library programming.\nTo create a library, you have to pile up a lot of C ++ features that you wouldn't use for the rest of your application.\nSo I'm a little more familiar with C ++ than a regular C ++ programmer.\n\nAs a guardian of C ++, I am bullying C ++ compilers every day.\nIt lives on Twitter under the name Inamu no Mitama no Kakami (@mitama_rs) and is working to save C ++ programmers who are lost on Twitter.\n\nBy the way, suddenly, this is my story.\nIt has been a year since I was hired by a venture company and wrote C ++ and Rust.\nThe C ++ programmer who had just changed jobs had some troubles.\n\n * Source code that uses malloc, not even smart pointers, even new\n * Completely backward compatible STL, oleore implementation\n * A towering library with over 30,000 headers\n * No documentation or meaningless past heritage\n * People who say \"use templates as much as possible because they are difficult\"\n * CMakeLists not automated at all\n\nMost of the suffering is caused by a library called Open Cascade Technology.\n\nNot just C ++, dirty code is very dirty.\nSometimes I want to say \"Don't write C ++ anymore\".\n\nProgrammers who write dirty code aren't in any way out.\nOn the contrary, it looks like I'm writing time code many times more than I do.\nIf you use the library, you can write the processing by hand,\nI wrote a lot of similar, slightly different processing,\nWriting meaningless conditional branches,\nWrite unused variables,\nIt's all about doing all the wrong techniques to complicate coding.\n\nWorse, we don't have the time to clean up the CMakeLists or enrich our tests.\nIt's full of implementation.\n\nFortunately venture companies are very mobile, so I'm going to burn out the shit code.\nIt's unbearable if a newcomer looks at the existing code and imitates it.\nI'm thinking that if you leave one line of shit code, it will be 100 lines of it.\nThis book is a collection of tears and sighs that I shed at that time.\nFortunately, the sequel to this book will not be written because the team has been stable enough to destroy the fucking code before it is born in education and review.\n\n=== @ <b> {Is C ++ difficult? }\n\nC ++ is difficult, but in most cases I find it necessary.\n\nC ++ is extremely sophisticated.\nIt may not be suitable for easy coding of simple things.\nBut from the perspective of me writing the library, it's a heavenly language.\nWhenever I wanted to write a library with great run-time performance and a flexible interface, C ++ was the best language.\nI use Python for some reason, but there was a mysterious reassurance that I could rewrite it in C ++ if the runtime performance was not sufficient (although the Python library is excellent, of course).\n\nIf you don't need good run-time performance, have a dedicated interface, and don't have a legacy of C ++,\nC ++ may seem wastefully complex and difficult.\n\nMost easy-to-write languages ​​are made simple by truncating something.\nIn that sense, C ++ is difficult.\nVarious functions are open to users.\nC ++ can help you when you really need them.\nConversely, choosing C ++ as your development language may be wrong if you don't really need them.\nThose people should go to the next Python room.\n\n@ <b> {C ++ standards can be difficult to understand, though! }"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/intro.re","version":2}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":28,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/intro.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 28, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":29,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/intro.re"},"position":{"line":36,"character":23}}}
[server] Got a method textDocument/hover
[server] processing took 0.0178813934326ms
Sending response {"id": 29, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":30,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/intro.re"},"position":{"line":37,"character":23}}}
[server] Got a method textDocument/hover
[server] processing took 0.0181198120117ms
Sending response {"id": 30, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":31,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/intro.re"},"position":{"line":50,"character":23}}}
[server] Got a method textDocument/hover
[server] processing took 0.0112056732178ms
Sending response {"id": 31, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/chapter1.re","languageId":"reason","version":1,"text":"= Ah! This branch is \"deep\"! !!\n\nPerhaps you've seen code with unusually complex branching and deep nesting?\nIt is no exaggeration to say that complicated control flow code is a typical example of bad code.\n\nIf you have to do complicated things, your code will be complicated.\nBut I think it's a mistake to put too many cases into one function.\n\nThis chapter discusses how to code complex branches concisely and how to separate functions.\n\n== Branch Ranbu\n\n * Negative number check for non-negative integers\n * Double check for pointers that have already been Null checked\n\nFor example, see a branch that never goes through.\n\n// emlist [Negative check for non-negative integers] [cpp] {\n// sizeof returns std :: size_t so it can never be true\nif constexpr (sizeof (foo) <0) {\n  // ...\n}\n//}\n\n// emlist [Double check for pointers that have already been Null checked] [cpp] {\nint * ptr;\nassert (ptr); // first check\nif (ptr) {/ Either assert or handle\n  // ...\n} else {\n  // ...\n}\n//}\n\nIn case of non-negative integer negative check, it is easy to fix and just remove it.\n\nI'm not sure if the pointer double check is right to assert or right to handle.\nTherefore, there is no choice but to ask the person who wrote git blame and read it, or to think by reading the code yourself.\n\n== Normal system and abnormal system\n\nThe fact that the normal system and the abnormal system are not written separately is one of the reasons why the code is difficult to understand.\nIt is a well-known method that the abnormal system is checked first, the abnormal value is returned, and then the normal system is processed.\n\nIn the first pull request that the newcomer first wrote, he showed me the code using switch and if.\nUnfortunately, it's so complicated that it takes up space, so I have to give up posting pseudo code.\n\nA better answer to this question seems to be the introduction of monads.\nBelow is the Rust code.\nI will write a function that parses the command input and doubles it if it is a number.\n\n// emlist [Command line parse written using the monad function of Result] [rust] {\nfn twice_arg (mut argv: env :: Args)-> Result <i32, CliError> {\n    argv.nth (1)\n        .ok_or (CliError :: NotEnoughArgs)?\n        .parse :: <i32> ()\n        .map (| x | x * 2)\n}\n//}\n\nThis method chain does not write error handling!\nI won't go into a detailed explanation of Rust, but if you use monadic functions, you don't have to bother writing error handling.\nSynthesize the error!\n\nFunctions such as @ <code> {ok_or} and @ <code> {map} are called combinators.\n@ <code> {nth} or @ <code> {parse} is returning @ <code> {Option} or @ <code> {Result},\nThe combinator is composing the error.\n\nI have a disappointing news.\nC ++ doesn't have such advanced features and libraries.\nBut if you don't, you can create a monad library.\n\nDon't have time to write a template library?\nHowever, combinators give us an important suggestion of separating functions in \"units that can fail\".\nAt the very least, I want to keep in mind that the function should be cut out in units where an error occurs.\n\n== Summary of this chapter\n\nNo language does not have a monad.\nMake a monadic function.\n\nDo not write a function that causes many kinds of errors.\nDivide the function by the minimum unit where an error occurs.\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":32,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/chapter1.re"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0460147857666ms
Sending response {"id": 32, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":33,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/chapter1.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 33, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":34,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/chapter1.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 34, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/chapter1.re"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/chapter1.re","languageId":"reason","version":1,"text":"= Ah! This branch is \"deep\"! !!\n\nPerhaps you've seen code with unusually complex branching and deep nesting?\nIt is no exaggeration to say that complicated control flow code is a typical example of bad code.\n\nIf you have to do complicated things, your code will be complicated.\nBut I think it's a mistake to put too many cases into one function.\n\nThis chapter discusses how to code complex branches concisely and how to separate functions.\n\n== Branch Ranbu\n\n * Negative number check for non-negative integers\n * Double check for pointers that have already been Null checked\n\nFor example, see a branch that never goes through.\n\n// emlist [Negative check for non-negative integers] [cpp] {\n// sizeof returns std :: size_t so it can never be true\nif constexpr (sizeof (foo) <0) {\n  // ...\n}\n//}\n\n// emlist [Double check for pointers that have already been Null checked] [cpp] {\nint * ptr;\nassert (ptr); // first check\nif (ptr) {/ Either assert or handle\n  // ...\n} else {\n  // ...\n}\n//}\n\nIn case of non-negative integer negative check, it is easy to fix and just remove it.\n\nI'm not sure if the pointer double check is right to assert or right to handle.\nTherefore, there is no choice but to ask the person who wrote git blame and read it, or to think by reading the code yourself.\n\n== Normal system and abnormal system\n\nThe fact that the normal system and the abnormal system are not written separately is one of the reasons why the code is difficult to understand.\nIt is a well-known method that the abnormal system is checked first, the abnormal value is returned, and then the normal system is processed.\n\nIn the first pull request that the newcomer first wrote, he showed me the code using switch and if.\nUnfortunately, it's so complicated that it takes up space, so I have to give up posting pseudo code.\n\nA better answer to this question seems to be the introduction of monads.\nBelow is the Rust code.\nI will write a function that parses the command input and doubles it if it is a number.\n\n// emlist [Command line parse written using the monad function of Result] [rust] {\nfn twice_arg (mut argv: env :: Args)-> Result <i32, CliError> {\n    argv.nth (1)\n        .ok_or (CliError :: NotEnoughArgs)?\n        .parse :: <i32> ()\n        .map (| x | x * 2)\n}\n//}\n\nThis method chain does not write error handling!\nI won't go into a detailed explanation of Rust, but if you use monadic functions, you don't have to bother writing error handling.\nSynthesize the error!\n\nFunctions such as @ <code> {ok_or} and @ <code> {map} are called combinators.\n@ <code> {nth} or @ <code> {parse} is returning @ <code> {Option} or @ <code> {Result},\nThe combinator is composing the error.\n\nI have a disappointing news.\nC ++ doesn't have such advanced features and libraries.\nBut if you don't, you can create a monad library.\n\nDon't have time to write a template library?\nHowever, combinators give us an important suggestion of separating functions in \"units that can fail\".\nAt the very least, I want to keep in mind that the function should be cut out in units where an error occurs.\n\n== Summary of this chapter\n\nNo language does not have a monad.\nMake a monadic function.\n\nDo not write a function that causes many kinds of errors.\nDivide the function by the minimum unit where an error occurs.\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":35,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/chapter1.re"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Sending response {"id": 35, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":36,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/chapter1.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 36, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":37,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/chapter1.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 37, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/chapter1.re"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/chapter5.re","languageId":"reason","version":1,"text":"= Overload resolution\n\n@ <b> {I use it better than the template, but I don't understand it better than the template! }\n\nC ++ has a feature called overloading that allows you to implement functions of the same name with different types of arguments.\n\"Overload resolution\" is the name of the process that selects which implementation to call when a function call expression is given.\n\n// emlist [] [cpp] {\nvoid func (int); // # 1\nvoid func (double); // # 2\n\nint main () {\n    func (1); // calls # 1\n    func (0.0); // calls # 2\n}\n//}\n\nThis appendix details overloading.\n\n== Overload resolution ranking\n\nOverload resolution priorities are ordered in the order Partial Order.\nPartial Order is @ <code> {a <b} or @ <code> {a> b} or @ <code> {false}\nThere is a condition where @ <code> {a == b} is not @ <code> {true}, that is, incomparable.\n\nWhen the overload candidates of a function are incomparable,\nOverload resolution becomes ambiguous and fails to compile.\n\n// emlist [] [cpp] {\nvoid func (int, double); // # 1\nvoid func (long, int); // # 2\n\nint main () {\n    func (1, 1); // ambiguous\n}\n//}\n\nIn this example, @ <b> {# 1} is the first argument, and @ <b> {# 2} is the second argument, which is an int.\nHowever, @ <b> {# 1} is the second argument call to int double,\n@ <b> {# 2} has a long 1st argument call to int.\nAs a result, the compiler can't figure out which to call, and the overload resolution is ambiguous.\n\nSome readers might think that long is closer to int than double, but\nC ++ doesn't take things like overload distance into account, so it's all ambiguous when it's not completely prioritized.\n\nBy the way, I used it without defining the word priority.\nHow are the overload priorities set?\nHere are some simplified priorities.\nNo templates are included in this ranking (discussed later).\n\n * 1. Exact match: When all argument types are exact matches, including modifiers.\n * 2. Match by fine adjustment: In addition to 1. Allowing conversion from non-const to const, conversion from array to pointer to the first element of the array, etc.\n * 3. Match by promotion: In addition to 2., match from int to long, float to double, etc. by allowing safe and implicit conversion.\n * 4. Match by standard conversion only: In addition to 3. Matching by allowing conversion from int to float or public base class. Does not include conversions by implicit conversion operators or conversions by callable constructors.\n * 5. Match by user-defined conversion: In addition to 4., all conversions such as conversion by implicit conversion operator and conversion by constructor are allowed and matched.\n * 6. ellipsis (...): Almost all types match ellipsis (but not classes with non-trivial copy constructors).\n\nIt's pretty simplistic, but you're unlikely to encounter it if you can't think of it in this order (except for initializer_list, which I'll omit here).\n\nHere are some small examples:\n\n// emlist [] [cpp] {\nint f1 (int); // # 1\nint f1 (double); // # 2\n\nf1 (4); // calls # 1\n// # 1: perfect match\n// # 2: needs a standard conversion\n//}\n\nThis is a simple example that requires no explanation.\nPerfect match has priority.\n\n// emlist [] [cpp] {\nint f2 (int); // # 3\nint f2 (char); // # 4\n\nf2 (true); // calls # 3\n// # 3: matches with promotion\n// # 4: requires stronger promotion\n//}\n\nInteger promotions have a priority among them.\n\n// emlist [] [cpp] {\nstruct X {\n    X (int);\n};\n\nint f3 (X); // # 5\nint f3 (...); // # 6\n\nf3 (1); // # calls # 5\n// # 5: matches with user-defined conversion\n// # 6: requires a match with ellipsis\n//}\n\n== Implicit arguments of member functions\n\nA member function has an implicit argument @ <code> {* this} as its first argument (\"implicit argument\" is a coined word that can only be found here).\nThe type of the implicit first argument that the member function of @ <code> {MyClass} has is @ <code> {MyClass &} for non-const member function,\n@ <code> {MyClass const &} for const member functions.\nFrom C ++ 11, an rvalue version has been added.\nThe type of the implicit first argument that the member function of rvalue @ <code> {MyClass} has is @ <code> {MyClass &&} if it is a non-const member function,\n@ <code> {MyClass const &&} for const member functions (though you probably won't use the const version).\n\nIf you take an rvalue reference as an argument, it will not match the actual lvalue, but only the rvalue.\n\n// emlist [] [cpp] {\nstruct S {};\n\nvoid func (S &); // # 1\nvoid func (S &&); // # 2\n\nint main () {\n    S s {};\n    void func (s); // calls # 1\n    void func (S {}); // calls # 2\n}\n//}\n\nYou can do the same with member functions.\nIn the member function, write the modifier after @ <code> {()} as follows.\nThis modifier is the overloading syntax for implicit arguments of member functions.\n\n// emlist [] [cpp] {\nstruct watch_t {\n    void tick () &; // # 1\n    void tick () const &; // # 2\n    void tick () &&; // # 3\n    void tack () const &; // # 4\n};\n//}\n\nCalling this will select the overload as follows:\n\n// emlist [] [cpp] {\nstruct watch_t {\n    void tick () &; // # 1\n    void tick () const &; // # 2\n    void tick () &&; // # 3\n    void tack () const &; // # 4\n};\n\nint main () {\n    watch_t watch {};\n    const watch_t const_watch {};\n    watch.tick (); // calls # 1\n    const_watch.tick (); // calls # 2\n    watch_t {}. tick (); // calls # 3\n    // calls # 4, because const lvalue ref accepts rvalue\n    watch_t {}. tack (); \n}\n//}\n\n== Template VS Specialization VS Non-template\n\n// emlist [] [cpp] {\ntemplate <class T> void f (T); // # 1\nvoid f (int); // # 2\ntemplate <> void f <double> (double); // # 3\n\nint main () {\n    f (1); // calls # 2\n    f (1.0); // calls # 3\n    f (\"hoge\"); // calls # 1\n}\n//}\n\nIt's often said that non-templates take precedence when overloaded candidates are basically templates and non-templates.\nAlso, any template that is explicitly specialized has higher priority than templates that are not.\nAs we've seen in Chapter 4, this has some pitfalls.\nNon-templates take precedence over templates only if the non-templates are a perfect match.\nTo get rid of the generic function template, and to match a more specialized template, you need to include the modifiers as well.\n\n// emlist [] [cpp] {\ntemplate <typename T> void f (T &&);\n\n// Vectors are overloads written with a firm intention to call this\ntemplate <typename T> void f (std :: vector <T> &);\ntemplate <typename T> void f (const std :: vector <T> &);\ntemplate <typename T> void f (std :: vector <T> &&);\ntemplate <typename T> void f (const std :: vector <T> &&);\n//}\n\n== initializer_list\n\nFrom C ++ 11, @ <code> {std :: initializer_list} has been added.\n\n// emlist [] [cpp] {\n#include <initializer_list>\n\nvoid func (std :: initializer_list <int>);\n\nint main () {\n    func ({1, 2, 3});\n}\n//}\n\n@ <code> {std :: initializer_list} does overload resolution to minimize type conversions in braced-init-list.\n\n// emlist [] [cpp] {\n#include <initializer_list>\n\nvoid func (std :: initializer_list <int>); // # 1\nvoid func (std :: initializer_list <char>); // # 2\n\nint main () {\n    func ({'a', 'a', 'a'}); // calls # 2\n    func ({'a', 'a', 'a', 1}); // calls # 1\n}\n//}\n\n@ <code> {func ({'a', 'a', 'a'})} is an exact match for @ <code> {std :: initializer_list <char>}.\n@ <code> {func ({'a', 'a', 'a', 1}))} requires type conversion.\n@ <code> {int-> char} requires standard conversion, but @ <code> {char-> int} can be promoted, so this is the minimum type conversion.\nSo the overload resolves to @ <code> {std :: initializer_list <int>}.\n\nThe following overloads\n@ <code> {int-> double},\nBoth @ <code> {double-> int} are standard conversions, so overloading is ambiguous and cannot be solved.\n\n\n// emlist [] [cpp] {\n#include <initializer_list>\n\nvoid func (std :: initializer_list <int>); // # 1\nvoid func (std :: initializer_list <double>); // # 2\n\nint main () {\n    func ({1,2,1.0}); // ambiguous\n}\n//}\n\n\nWhat do you get when you run the following code?\n\n// emlist [] [cpp] {\n#include <string>\n#include <iostream>\n\nint main () {\n    std :: cout << std :: string (33, 'a') << std :: endl;\n    std :: cout << std :: string {33, 'a'} << std :: endl; \n}\n//}\n\n\nThe first outputs @ <b> {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}.\nThe second is not, @ <b> {33} is interpreted as a character (assuming ASCII, the output will be @ <b> {! A}).\nThis is due to the specification that the constructor with @ <code> {std :: initializer_list} as an argument is called preferentially when initialized with braces.\n@ <code> {std :: string} has a constructor that takes a list of characters at @ <code> {std :: initializer_list <char>}, which is called first.\n\n== Overload ranking with template\n\n * 1. Perfect match\n * 2. An exact match for an explicitly specialized template\n * 3. Perfect match for more specialized templates\n * 4. Perfect match by instantiating template\n * 5. Match by fine adjustment\n * 6. Promotional match\n * 7. Match by standard conversion only\n * 8. Match by user-defined conversion\n * 9. ellipsis (...)\n\nAs you can see,\nTemplates can inline exact matching functions, so\nDo not write function templates that are too generic.\n\nNever think of coexisting generic function templates and non-template overloads, it's just hell.\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":38,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/chapter5.re"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 38, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":39,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/chapter5.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 39, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":40,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/chapter5.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 40, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":41,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/chapter5.re"},"position":{"line":9,"character":21}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 41, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":42,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/chapter5.re"},"position":{"line":12,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.0209808349609ms
Sending response {"id": 42, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":43,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/chapter5.re"},"position":{"line":7,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.0460147857666ms
Sending response {"id": 43, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":44,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/chapter5.re"},"position":{"line":7,"character":3}}}
[server] Got a method textDocument/hover
[server] processing took 0.018835067749ms
Sending response {"id": 44, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":45,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/chapter5.re"},"position":{"line":7,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.92601776123ms
Sending response {"id": 45, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":46,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/mandalarian/Github/cppbook/chapter5.re"},"range":{"start":{"line":7,"character":3},"end":{"line":7,"character":3}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 46, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
